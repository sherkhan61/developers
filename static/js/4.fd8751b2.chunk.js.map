{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","src","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","messagesElements","messagesData","m","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,0B,oGCc/HC,EAXyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,eAAC,IAAD,CAASC,GAAIN,EAAb,UAAmB,qBACfO,IAAI,4DADR,IAC0ER,EAAMS,WCE7EC,EAPsB,SAACV,GAClC,OACI,qBAAKG,UAAWC,IAAEO,QAAlB,SAA4BX,EAAMW,W,0BCApCC,EAAcC,YAAiB,IAoBxBC,EAAsBC,YAA+C,CAACC,KAAM,wBAAtDD,EAjBkE,SAACf,GAClG,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACKC,YACG,qBACA,iBACA,CAACC,IAAUR,GACXS,OAER,8BACI,kDCcDC,EA1BsB,SAACtB,GAClC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBP,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,OAC9E2B,EAAmBN,EAAMO,aAAaH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASpB,QAASoB,EAAEpB,SAAcoB,EAAE7B,OAOvF,OACI,sBAAKC,UAAWC,IAAE4B,QAAlB,UACI,qBAAK7B,UAAWC,IAAE6B,aAAlB,SACKR,IAEL,sBAAKtB,UAAWC,IAAE8B,SAAlB,UACI,8BAAML,IACN,cAACf,EAAD,CAAqBG,SAZb,SAACkB,GACjBnC,EAAMoC,YAAYD,EAAOE,0B,yBCT7BC,EAA6B,SAACf,GAC9B,MAAO,CACHgB,OAAQhB,EAAMiB,KAAKD,S,YCQZE,sBACXC,aARkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAMhB,eAAsBmB,ODA1B,SAAgCC,GASnC,OAFqCF,YAAQJ,EAARI,EANkB,SAAC1C,GAAW,IAC1DuC,EAAwBvC,EAAxBuC,OAAWM,EAD8C,YACjC7C,EADiC,YAE9D,OAAKuC,EACE,cAACK,EAAD,eAAsBC,IADT,cAAC,IAAD,CAAUtC,GAAI,gBCJ3BkC,CAGbnB","file":"static/js/4.fd8751b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"Dialogs_dialogsItems__3WhQg\",\"active\":\"Dialogs_active__2KXFR\",\"messages\":\"Dialogs_messages__3ngcJ\",\"dialog\":\"Dialogs_dialog__1FOvC\"};","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}><img\r\n                src=\"https://image.flaticon.com/icons/png/512/149/149071.png\"></img> {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n\r\n\r\n// types\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message\r\n\r\n\r\n// types\r\ntype PropsType = {\r\n    message: string\r\n}","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators'\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesTypeKeys>(\r\n                    'Enter your message',\r\n                    'newMessageBody',\r\n                    [required, maxLength50],\r\n                    Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType, PropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\n// types\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\ntype NewMessageFormValuesTypeKeys = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {InitialStateType} from '../../Redux/dialogs-reducer'\r\nimport {AddMessageFormRedux, NewMessageFormValuesType} from './AddMessageForm/AddMessageForm'\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsData.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messagesData.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs\r\n\r\n// types\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType,\r\n    sendMessage: (messageText: string) => void\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n// High Order Component HOC\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStatePropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    const ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}","import React from 'react'\r\nimport {actions} from '../../Redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect //HOC\r\n)(Dialogs)"],"sourceRoot":""}