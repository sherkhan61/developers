{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength50","maxLengthCreator","AddPostReduxForm","required","MyPost","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostMemorized","React","memo","MyPostsContainer","connect","state","profilePage","postsData","actions","addPostActionCreate","MyPosts","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,6BAA6B,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,oBCAlQD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,WAAa,4BAA4B,MAAQ,yB,oBCAhGD,EAAOC,QAAU,CAAC,KAAO,qB,kJCwCVC,EAtCqC,SAACC,GAAW,IAAD,EAE7BC,oBAAS,GAFoB,mBAEtDC,EAFsD,KAE5CC,EAF4C,OAGjCF,mBAASD,EAAMI,QAHkB,mBAGtDA,EAHsD,KAG9CC,EAH8C,KAK3DC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAaV,OACI,iCACMF,GACF,gCACI,wCADJ,IACmB,sBAAMK,cAfR,WACrBJ,GAAY,IAcW,SAAwCH,EAAMI,QAAU,mBAG1EF,GACD,8BACI,uBAAOM,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,WAAW,EAAMC,OAjBnC,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAemEO,MAAOP,U,0BCatFW,EAFkBC,YAAkC,CAACC,KAAM,gBAAzCD,EApCwD,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAC9G,OAAO,uBAAMC,SAAUH,EAAhB,UACH,8BACI,4CAEHE,GAAS,qBAAKE,UAAWC,IAAEC,iBAAlB,SACLJ,IAGL,gCACI,0CADJ,KACuBK,YAAqC,YAAa,WAAY,GAAIC,QAEzF,gCACI,kDADJ,KAEkBD,YAAqC,GAAI,iBAAkB,GAAIC,IAAO,CAACC,KAAM,gBAG/F,gCACI,uDADJ,IAEKF,YAAqC,yBAA0B,4BAA6B,GAAIG,QAErG,gCACI,yCADJ,IAEKH,YAAqC,WAAY,UAAW,GAAIG,QAGrE,gCACI,yCADJ,KACsBC,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAAC,GACpD,OAAO,qBAAeX,UAAWC,IAAEW,QAA5B,SACH,8BAAID,EAAJ,KAAWR,YAAYQ,EAAK,YAAcA,EAAK,GAAIP,SADtCO,eCWvBE,EAA8C,SAAC,GAAsC,IAArChB,EAAoC,EAApCA,QAASiB,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aACpE,OAAO,gCACFD,GAAW,8BACR,wBAAQE,QAASD,EAAjB,oBAEJ,gCACI,0CADJ,KACuBlB,EAAQoB,YAE/B,gCACI,kDADJ,KAC+BpB,EAAQqB,eAAiB,MAAQ,QAE/DrB,EAAQqB,gBACT,gCACI,uDADJ,KACoCrB,EAAQsB,6BAG5C,gCACI,yCADJ,KACsBtB,EAAQuB,WAE9B,gCACI,yCADJ,KAEIb,OACKC,KAAKX,EAAQY,UACbC,KAAI,SAAAC,GACD,OAAO,cAAC,EAAD,CAAmBU,aAAcV,EACxBW,aAAczB,EAAQY,SAASE,IAD1BA,aAQnCY,EAAsC,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACxD,OAAO,sBAAKtB,UAAWC,IAAEW,QAAlB,UAA2B,4BAAIS,IAA/B,KAAmDC,MAG/CE,EAzE0B,SAAC,GAAsE,IAArEV,EAAoE,EAApEA,QAASjB,EAA2D,EAA3DA,QAASf,EAAkD,EAAlDA,OAAQU,EAA0C,EAA1CA,aAAciC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YAAiB,EAC7E/C,oBAAS,GADoE,mBACtGC,EADsG,KAC5FC,EAD4F,KAG3G,IAAKgB,EACD,OAAO,cAAC8B,EAAA,EAAD,IAeX,OACI,8BACI,sBAAK3B,UAAWC,IAAE2B,iBAAlB,UACI,qBAAKC,IAAKhC,EAAQiC,OAAOC,OAASC,IAAWhC,UAAWC,IAAEgC,YACzDnB,GAAW,uBAAOT,KAAM,OAAQnB,SAjBjB,SAACC,GACrBA,EAAE+C,OAAOC,OAAShD,EAAE+C,OAAOC,MAAMC,QACjCX,EAAUtC,EAAE+C,OAAOC,MAAM,OAiBpBvD,EACK,cAAC,EAAD,CAAiByD,cAAexC,EAASA,QAASA,EAASE,SAf5D,SAACuC,GACdZ,EAAYY,GACPC,MAAK,WACF1D,GAAY,SAaN,cAAC,EAAD,CAAakC,aAAc,WACzBlC,GAAY,IACbgB,QAASA,EAASiB,QAASA,IAClC,cAAC,EAAD,CAAwBhC,OAAQA,EAAQU,aAAcA,U,qDCtBvDgD,EAbmB,SAAC9D,GAC/B,OACI,sBAAKsB,UAAWC,IAAEwC,KAAlB,UACI,qBAAKZ,IAAI,kFACRnD,EAAMgE,QACP,gCACI,wCADJ,IACuBhE,EAAMiE,kB,SCJnCC,EAAcC,YAAiB,IAexBC,EAAmBpD,YAA4C,CAACC,KAAM,kBAAnDD,EAb+D,SAAChB,GAC5F,OACI,uBAAMqB,SAAUrB,EAAMkB,aAAtB,UACI,8BACKO,YAAuC,GAAI,cAAe,CAAC4C,IAAUH,GAActC,OAExF,8BACI,sDCRV0C,EAAqD,SAACtE,GACxD,IAAIuE,EACA,YAAIvE,EAAMwE,OACLC,UACAzC,KAAI,SAAA0C,GAAC,OAAI,cAAC,EAAD,CAAiBV,QAASU,EAAEV,QAASC,WAAYS,EAAET,YAAxCS,EAAEC,OAM/B,OACI,sBAAKrD,UAAWC,IAAEqD,WAAlB,UACI,0CAGA,cAACR,EAAD,CAAkB/C,SATV,SAACwD,GACb7E,EAAM8E,QAAQD,EAAOE,gBASjB,qBAAKzD,UAAWC,IAAEiD,MAAlB,SACKD,QAUFS,EAFSC,IAAMC,KAAKZ,G,QCdpBa,EALUC,aANH,SAACC,GACnB,MAAO,CACHb,MAAOa,EAAMC,YAAYC,aAIoE,CACjGT,QAASU,IAAQC,qBADIL,CAEtBM,GCKYC,EAdsB,SAAC3F,GAClC,OACI,gCACI,cAAC,EAAD,CAAaoC,QAASpC,EAAMoC,QACfjB,QAASnB,EAAMmB,QACff,OAAQJ,EAAMI,OACdU,aAAcd,EAAMc,aACpBkC,YAAahD,EAAMgD,YACnBD,UAAW/C,EAAM+C,YAC9B,cAAC,EAAD,Q,gBCJN6C,E,+KAGE,IAAIC,GAAyBC,KAAK9F,MAAM+F,MAAMC,OAAOH,OAChDA,IACDA,EAASC,KAAK9F,MAAMiG,mBAEhBH,KAAK9F,MAAMkG,QAAQC,KAAK,UAG3BN,GAGDC,KAAK9F,MAAMoG,WAAWP,GACtBC,KAAK9F,MAAMqG,UAAUR,IAHrBS,QAAQlF,MAAM,oE,0CASlB0E,KAAKS,mB,yCAGUC,EAAsBC,GACjCX,KAAK9F,MAAM+F,MAAMC,OAAOH,QAAUW,EAAUT,MAAMC,OAAOH,QACzDC,KAAKS,mB,+BAKT,OACI,cAAC,EAAD,2BAAaT,KAAK9F,OAAlB,IACSoC,SAAU0D,KAAK9F,MAAM+F,MAAMC,OAAOH,OAClC1E,QAAS2E,KAAK9F,MAAMmB,QACpBf,OAAQ0F,KAAK9F,MAAMI,OACnBU,aAAcgF,KAAK9F,MAAMc,aACzBiC,UAAW+C,KAAK9F,MAAM+C,iB,GApCZkC,IAAMyB,WAmDtBC,sBACXvB,aAVkB,SAACC,GACnB,MAAQ,CACJlE,QAASkE,EAAMC,YAAYnE,QAC3Bf,OAAQiF,EAAMC,YAAYlF,OAC1B6F,iBAAkBZ,EAAMuB,KAAKf,OAC7BgB,OAAQxB,EAAMuB,KAAKC,UAKE,CAACT,eAAYC,cAAWvF,iBAAciC,cAAWC,kBAC1E8D,IAFWH,CAIbf","file":"static/js/3.bc499ad1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__YlsZ_\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2FlIf\",\"contact\":\"ProfileInfo_contact__1xZZF\",\"formControl\":\"ProfileInfo_formControl__2TMxW\",\"error\":\"ProfileInfo_error__3kPPe\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3rmD9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__3ZUBZ\",\"postsBlock\":\"MyPosts_postsBlock__2dlHA\",\"posts\":\"MyPosts_posts__u65b6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Enc2\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || '-----------'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n\r\n// types start\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n// types end","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {ProfileType} from '../../../types/types'\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileDataFormTypeKeys>('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a\r\n                job</b>: {createField<ProfileDataFormTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField<ProfileDataFormTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField<ProfileDataFormTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n\r\n// types\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileDataFormTypeKeys = Extract<keyof ProfileType, string>","import React, {ChangeEvent, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({isOwner, profile, status, updateStatus, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map(key => {\r\n                    return <Contact key={key} contactTitle={key}\r\n                                    contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n\r\n// types start\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n// types end\r\n","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://vokrug-tv.ru/pic/person/e/9/a/b/e9abb1b8929cede9f7058672f4b12556.jpeg\"></img>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}","import {maxLengthCreator, required} from '../../../../utils/validators/validators'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, Textarea} from '../../../common/FormsControls/FormsControls'\r\nimport React from 'react'\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>('', 'newPostText', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<AddPostFormValuesType, PropsType>({form: 'addNewPostText'})(AddPostForm)\r\n\r\n\r\n// types start\r\ntype PropsType = {}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = Extract<keyof AddPostFormValuesType, string>\r\n// types end","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport {AddPostFormValuesType, AddPostReduxForm} from './AddPostForm/AddPostForm'\r\nimport {PostType} from '../../../types/types'\r\n\r\n\r\nconst MyPost: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>\r\n                My posts\r\n            </h3>\r\n            <AddPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst MyPostMemorized = React.memo(MyPost)\r\n\r\nexport default MyPostMemorized\r\n\r\n\r\n// types start\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n// types end\r\n","import React from 'react'\r\nimport {actions} from '../../../Redux/profile-reducer'\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../Redux/redux-store'\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreate\r\n})(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport {ProfileType} from '../../types/types'\r\n\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}\r\n                         savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n\r\n\r\n// types\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from '../../Redux/profile-reducer'\r\nimport {compose} from 'redux'\r\nimport {withRouter} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../Redux/redux-store'\r\nimport {RouteComponentProps} from 'react-router'\r\nimport {ProfileType} from '../../types/types'\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error('Id should exist in URI params or in state (\\'authorizedUserId\\')')\r\n        } else {\r\n            this.props.getProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    //withAuthRedirect //HOC\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n// types start\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n// types end\r\n"],"sourceRoot":""}